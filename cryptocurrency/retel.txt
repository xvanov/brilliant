

Q1 History of Currency

Sad reality is you don't have all the things you want. Even worse, others have them...
From dawn of time people have sought to remedy the situation.

solution 1: bartering
simple and direct, but 
problem: of coordination (between you and the person who has what you want)

solution 2: commodity money
furs, salt, barley
can be used and have value (commodity = economically useful good for all whose units are interchangeable)
problem: tranpsort, degradation

solution 3: currency that represents the commodity
Au, Ag
difficult to acquire but common enough to be adopted
solves transport and degration problem
problem: gold rush inflation, less stability

solution 4: fiat currency
usd
value commes from trust in government and mutual trust that everyone will accept the currency
solves inflation and stability
credit
promise to pay later
have to put trust in credit card companies to prevent fraud
problem: central authorities can abuse, control and make profit

solution 5: cryptocurrency
difficult to control unilaterally
solves central authority problem


Q2 Fable of Cryptonia

definitions:
- gold mine with lots of gold
- each person can cast unique to them spell
- dragon has:
	1/ infallible memory
	2/ completely trustworthy (won't take gold for himself)
	3/ protects the gold from all thieves
- must have qualities for currency:
	1/ authentication
	2/ tamper resistance
- banknote : signed with amount and signature (spell) of user,
		then sealed in special tamper-proof wax envolope

Q3 Cryptographic signatures
replace magic spells with math
find ability to verify siganture without exposing the secret key

multiplication-based crypto:
secretKey = s
publicKey = 5s
message = m
signature = ms

5(siganture) = (publicKey)m

multiplication, division, addition, subtraction, square, take root ....
are simple to reverse, modulo is not (infinite possible answers)


mod-based crupto:
signature = (ms) mod n
graphical viz: mod_crypto_viz

only way to guess s in to do:

(mt) mod n = signature for differen t until match


s mod n = publicKey
(ms) mod n = signature
m

verification:

(pk*m) mod n = signature = ((sk*m) mod n)*m) mod n
(sk*m) mod n = signature 

problem = public key can be used for verification
solution = publicKey = (g*s) mod n where g is known to all

new verification:
(publicKey*m) mod n = (signature * g) mod n
publicKey = (g*s) mod n
signature = (m*s) mod n

Q4 Decentralizing Cryptonia
- removing the dragon
- create a tablet and distribute to everyone, tablet will have the ledger, and can verify any transaction
- constant money supply -> deflation 

Q5 Cryptonian vulnerabilities
- if n (modulo divisor) is small, it two peaple can have the same pk
- a transaction needs to have unique message











